import static groovy.json.JsonOutput.*

// Options for Hipchat rooms; _MAJOR is for master/release branch builds, _MINOR for everything else
public static final String HIPCHAT_ROOM_MAJOR = "MRP Jenkins Notifications"
public static final String HIPCHAT_ROOM_MINOR = "CMOB-Jenkins-Test"

//Credential for accessing the GIT repository of System configurations
public static final String GIT_ACCT = "gitorg_cmob_automation_owner"

//Credential for pushing to artifactory repo
public static final String ARTY_ACCT = "scm_user"

public static final String BUILD_NODE = "mrp-centos7-docker"

// Returns the number of commits since the last release tag on the current branch 
public static final String BUILD_NUMBER_SCRIPT = """git rev-list \$(git describe --match "rel-*" --abbrev=0).. --count"""

//Major.Minor.Main version location
public static final String VERSION_FILE_NAME = "system_config_version.mk"

public String airline
public String aircraft_type
public String bundle_name
public String stash_name
public String branch
public String settings
public String environment
public Map subcomponents
public List<String> feature_toggles
private Object script
private Object err_handler
private Object misc
private Object arty

// Primary artifactory locations
public static final String ARTY_HOST = "artifactory.viasat.com:8091"
private static final String ARTIFACTORY_SERVER_ID = "1869792217@1444083315215" 
public static final String ARTY_PREFIX = "${ARTY_HOST}/twinpeaks-ifcp-gen/system_config/${env.BRANCH_NAME}"
private static final String ARTIFACTORY_TEST_PATH = "devel/pipeline-test-mode"
private static final String PROD_MGMT_IP = "192.168.20.1"
private static final String COMPONENT_VERSIONS_FILE = "config/CONFIG_VERSIONS"

public static final String DISABLE_5G = "disable_5g"
public static final String DISABLE_W_IFE = "disable_w_ife"
public static final String ENABLE_HIDDEN_SSID = "enable_hidden_ssid"
public static final String MAINTENANCE = "maintenance"
public static final String STC = "stc"

def hipchat_room // Send notifications to the chat room
def lib_hc // hipchat
def lib_colors //colors for hipchat
def lib_eh //Error handling library
def lib_agg // Library aggregator
def osc_release_version // Release_version specified in the system_config_version.mk 
def osc_full_version // Release version + build number
def is_major_branch = false // If master or release branch - True
def version_lib = lagg.libs.mrp.version
Set<Object> configs = [] as Set<Object>

/* 
 * The branch-specific behavior works in the following ways:
 * (1) master/releases branches share one set of test resources and send notifications to HIPCHAT_ROOM_MAJOR, for general consumption
 * (2) feature/fix/refactor share another set of test resources and send notifications to HIPCHAT_ROOM_MINOR, for quieter consumption
 * (3) PR- branches (generated by git) share a third set of test resources, but send notifications to the same room as feature/fix/refactor
 * The above strategy allows notifications for all branches to be sent somewhere, but only the major branches (i.e. master/release)
 * are sent to the general-purpose room.
 */

if (env.BRANCH_NAME == "master" ||
    env.BRANCH_NAME.startsWith("release")) {
    hipchat_room = HIPCHAT_ROOM_MAJOR
} else if (env.BRANCH_NAME.startsWith("feature") ||
           env.BRANCH_NAME.startsWith("fix") ||
           env.BRANCH_NAME.startsWith("refactor")) {
    hipchat_room = HIPCHAT_ROOM_MINOR
} else if (env.BRANCH_NAME.startsWith("PR-")) {
    hipchat_room = HIPCHAT_ROOM_MINOR
} else {
    throw new IllegalStateException("Can't run pipeline for invalid branch name: ${env.BRANCH_NAME}")
}

node(build_node) {
    stages{  
        stage("Prep") {
            try{
                //load shared libraries from cmob-jenkins-jobs
	            deleteDir()
	            timeout(time: 15, unit: "MINUTES"){
	            git(changelog: false, 
	                credentialsId: GIT_ACCT,
	                poll: false,
	                url: "https://git.viasat.com/Mobility-Engineering/cmob-jenkins-jobs.git")
	            }
			
	            lib_agg = load("src/main/lib/library_aggregator.groovy")
	            lib_agg.addLibraries(lib_agg.DEFAULT_LIBS)
	            lib_eh = lib_agg.libs.error_handling
	            lib_hc = lib_agg.libs.hipchat
	            lib_colors = lib_agg.libs.colors
                //pipeline = lagg.libs.config_pipeline
                
	            // Get changelog
	            deleteDir()
	            timeout(time: 15, unit: "MINUTES") {
	                checkout(scm)
	            }

	            // Get OSC version
	            def build_number = sh(returnStdout: true, script: BUILD_NUMBER_SCRIPT).trim()
	            osc_release_version = readFile(file: VERSION_FILE_NAME)
	            osc_full_version = "${osc_release_number}.${build_number}"
	            currentBuild.displayName = "${osc_full_version} (#${currentBuild.number})"

	            if (env.BRANCH_NAME == "master" || env.BRANCH_NAME.startsWith("release")) {
	                is_major_branch = true
	            }
            } catch (Exception e) {
	            lib_hc?.send(lib_agg: lib_agg, message: getFailureMessage(osc_full_version), script: this, room: hipchat_room, color: lib_colors.RED)
                lib_eh?.errorHandling(e, "Prep", env.NODE_NAME, this, true)	
            }

            configs << SystemConfiguration(branch, airlines.ELY,
                                             aircraft_types.B789, preprod_lc,
                                             preprod_uc, lagg, this, prod_ip_addr,
                                             ["maintenance"], "ELY_B787_9_Preprod_Maintenance_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.ELY,
                                             aircraft_types.B789, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             ["maintenance"], "ELY_B787_9_Production_Maintenance_${osc_full_version}.tar.xz")
            // production/preprod configs
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.B738, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             [], "QFA_B737_800_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.B738, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             ["disable_w_ife"],
                                             "QFA_B737_800_Production_No_wIFE_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.B738, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             ["enable_hidden_ssid"],
                                             "QFA_B737_800_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.A330, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             [], "QFA_A330_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.A330, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             ["disable_w_ife"],
                                             "QFA_A330_Production_No_wIFE_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                             aircraft_types.A330, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             ["enable_hidden_ssid"],
                                             "QFA_A330_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                             aircraft_types.A319_A320, prod_lc,
                                             prod_uc, lagg, this, prod_ip_addr,
                                             [], "FIN_A319_A320_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "FIN_A321_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["disable_5g"],
                                            "FIN_A319_A320_Production_No5G_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["disable_5g"],
                                            "FIN_A321_Production_No5G_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "FIN_A319_A320_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "FIN_A321_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.A3XX, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_A3XX_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.A3XX, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_A3XX_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B737, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_B737_700_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B737, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_B737_700_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_B737_800_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_B737_800_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B737X, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_B737Max_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B737X, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "AAL_B737Max_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_B737_800_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "AAL_B737_800_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.A321T, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_A321T_LAA_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"], 
                                            "AAL_A321T_LAA_Production_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.ELY,
                                            aircraft_types.B789, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "ELY_B787_9_Production_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.ELY,
                                            aircraft_types.B789, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"], 
                                            "ELY_B787_9_Production_HiddenPAX_${osc_full_version}.tar.xz")
            // TODO: Add AAL LAA-A321 (no JIRA ticket yet)
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "QFA_B737_800_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["disable_w_ife"],
                                            "QFA_B737_800_Preprod_No_wIFE_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "QFA_B737_800_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.A330, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "QFA_A330_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.A330, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["disable_w_ife"],
                                            "QFA_A330_Preprod_No_wIFE_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.A330, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "QFA_A330_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "FIN_A319_A320_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "FIN_A321_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["disable_5g"],
                                            "FIN_A319_A320_Preprod_No5G_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["disable_5g"],
                                            "FIN_A321_Preprod_No5G_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "FIN_A319_A320_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "FIN_A321_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.A3XX, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_A3XX_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.A3XX, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_A3XX_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B737, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_B737_700_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B737, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_B737_700_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "SAS_B737_800_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "SAS_B737_800_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B737X, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_B737Max_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B737X, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "AAL_B737Max_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_B737_800_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B738, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"],
                                            "AAL_B737_800_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.A321T, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "AAL_A321T_LAA_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.A321T, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"], 
                                            "AAL_A321T_LAA_Preprod_HiddenPAX_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.ELY,
                                            aircraft_types.B789, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            [], "ELY_B787_9_Preprod_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.ELY,
                                            aircraft_types.B789, preprod_lc,
                                            preprod_uc, lagg, this, prod_ip_addr,
                                            ["enable_hidden_ssid"], 
                                            "ELY_B787_9_Preprod_HiddenPAX_${osc_full_version}.tar.xz")                                            
            // TODO: Add AAL LAA-A321 (no JIRA ticket yet)
            // STC configs
            // Until we have a better idea of what STCs will be when, build all STC
            // configurations we know of, then prune them down later
            configs << SystemConfiguration(branch, airlines.BOE,
                                            aircraft_types.B737X, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "BLF_737Max_8_TC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.BOE,
                                            aircraft_types.B788, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "BLF_787_8_TC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.QFA,
                                            aircraft_types.A330, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "QFA_A330_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A319_A320, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "FIN_A319_A320_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.FIN,
                                            aircraft_types.A321, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "FIN_A321_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.A3XX, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "SAS_A3XX_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B737, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "SAS_B737_700_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.SAS,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "SAS_B737_800_STC_${osc_full_version}.tar.xz")
            configs << SystemConfiguration(branch, airlines.AAL,
                                            aircraft_types.B738, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            ["stc"], "AAL_B737_800_STC_${osc_full_version}.tar.xz")
            // TODO: Add AAL LAA-A321 and LAA-A321T (no JIRA ticket yet)

            // Only need prod generic config, it's the same as preprod
            configs << SystemConfiguration(branch, airlines.GENERIC,
                                            aircraft_types.GENERIC, prod_lc,
                                            prod_uc, lagg, this, prod_ip_addr,
                                            [], "generic_configuration_${osc_full_version}.tar.xz")

        }

        stage("Build"){
            try{
                Map<String, Closure> build_map = [:]
                configs.each { config ->
                    String thread_name = "build_${config.stash_name}" as String
                    build_map.put(thread_name, { build() })
                }
                Map<String, Boolean> return_codes = parallel(build_map)
                println("Return codes are:")  // for easier debugging if one fails
                println(prettyPrint(toJson(return_codes)))
                Boolean success = checkReturnCodesForAllSuccesses(return_codes)
                    
                deleteDir()
	            timeout(time: 15, unit: "MINUTES"){
	            git(changelog: false, 
	                credentialsId: GIT_ACCT,
	                poll: false,
	                url: "https://git.viasat.com/Mobility-Engineering/onboard-system-config.git" )
	            }
	            currentBuild.result = "SUCCESS"   
            } catch (Exception e) {
		        currentBuild.result = "FAILURE"
		        lib_hc.send(lib_agg: lib_agg, message: getFailureMessage(osc_full_version), script: this, room: hipchat_room, color: lib_colors.RED)
                lib_eh.errorHandling(e, "Build", env.NODE_NAME, this, true)	
            }  

            // Abort if build failed
            if (currentBuild.result && currentBuild.result != "SUCCESS") {
                return
            } else if (is_major_branch) {
		
                // Build Tag
	            withCredentials([usernameColonPassword(credentialsId: GIT_ACCT,
	                                                    variable: "GIT_USER_PSW")]) {
	                sh("""
	                    git tag build-${env.BRANCH_NAME}-v${osc_full_version}
	                    git remote add tagger https://${GIT_USER_PSW}@git.viasat.com/Mobility-Engineering/onboard-system-config.git
	                    git push tagger --tags
	                    """)
	                }
	        }
        } // end of build stage

        stage("Promote") {
            try{
                Map<String, Closure> uploads_map = [:]
                configs.each { config ->
                    String thread_name = "upload_${config.stash_name}" as String
                    uploads_map.put(thread_name, { promote(test_mode) })
                }
                // don't abort other uploads if one fails
                uploads_map.put("failFast", false)
                Map<String, Boolean> return_codes = parallel(uploads_map)
                println("Return codes are:")  // for easier debugging if one fails
                println(prettyPrint(toJson(return_codes)))
                Boolean success = checkReturnCodesForAllSuccesses(return_codes)
            } catch (Exception e) {
                lib_hc?.send(lib_agg: lib_agg, message: getFailureMessage(osc_full_version), script: this, room: hipchat_room, color: lib_colors.RED)
                lib_eh?.errorHandling(e, "Promote", env.NODE_NAME, this, true)	
            }

            if (test_mode) {
                configs.first().cleanUpTestMode()
            }

            version_lib.incrementComponentBuildNumber(version_lib.SYSCFG,
                                                          branch, this, test_mode)
            // For now these are all tied together.  In the future, M3 will be
            // broken out into a different build process, and hopefully S4 will
            // be too
            //version_lib.incrementComponentBuildNumber(version_lib.S4CFG,
                                                          //branch, this, test_mode)
            //version_lib.incrementComponentBuildNumber(version_lib.M3CFG,
                                                          //branch, this, test_mode)

        }
    } //end of stages      
} // End of build_node context




def SystemConfiguration(String branch, String airline, String actype,
                               String settings, String env, Object lib_agg,
                               Object script, String ip_addr, List<String> feature_toggles,
                               String bundle_name) {
    // TODO: don't assume that all inputs are good.  Need better library passing first.
    this.branch = branch
    this.airline = airline
    this.aircraft_type = actype
    this.settings = settings
    this.environment = env
    this.stash_name = "${airline}_${actype}_${settings}_${env}"
    this.ip_address = ip_addr
    this.bundle_name = bundle_name
    if (ip_address != PROD_MGMT_IP) {
        stash_name += "_${ip_address}"
    }

    this.feature_toggles = (feature_toggles != null) ? feature_toggles : []
    for (toggle in feature_toggles) {
        stash_name += "_${toggle.toUpperCase()}"
    }

    this.stash_name += "_config"
    this.err_handler = lib_agg?.libs?.error_handling
    this.misc = lib_agg?.libs?.mrp?.misc_funcs
    this.arty = lib_agg?.libs?.artifactory
    this.script = script

    return this; // this can be written outside as well. need to try it once.
}
//return this; // this can be written outside as well. need to try it once.

// If needed, parameters can be given to the functions below.
def build() {
    Boolean success = false
    String make_command = createBuildCommand()

    /*
     * The ${make_command} passes off to a render.py script that contains the methods for looking up vault secrets.
     * The render script expects the vault credentials to be stored in environment variables, so we wrap the call
     * with withCredentials.
     */
    Integer status = -1
    // TODO: Rename to VAULT_USR, VAULT_PSW in order to facilitate
    // transition to Declarative Pipelines, as the naming is a limitation of how
    // these work.  See https://jenkins.io/doc/book/pipeline/syntax/#environment
    // This change must be coordinated with all users of these variables,
    // especially MRP config bundle rendering scripts.
    script.withCredentials([[$class: "UsernamePasswordMultiBinding",
                            credentialsId: "cmprod_vault_user",
                            usernameVariable: "VAULT_USER",
                            passwordVariable: "VAULT_PW"]]) {
        script.withCredentials([[$class: "UsernamePasswordMultiBinding",
                                credentialsId: "scm_user",
                                usernameVariable: "GIT_USR",
                                passwordVariable: "GIT_PSW"]]) {
            status = script.sh(script: make_command, returnStatus: true)
            }
        }
        success = (status == 0)

        if (success) {
            script.stash(includes: "*.tar.xz,**/ccd_output/**", name: stash_name)
            readSubcomponentVersions()
        }
        else {
            script.println("Build failure: ${stash_name}")
        }
    
    return success
}
    
def createBuildCommand() {
    String make_command_airline = airline.toLowerCase()
    String make_command_actype = aircraft_type.toLowerCase()
    String generic = ""  // default behavior is to omit this
    String config_bundle_name = bundle_name ? "BUNDLE_NAME=${bundle_name}" : ""

    // for now, generic config still needs an airline and aircraft type
    if (airline == "GENERIC") {
        make_command_airline = "QFA"
        make_command_actype = "B738"
        generic = " generic=y"
    }

    Map override_map = generateOverridesMap()
    /*
     * This json payload needs to be crazy escaped to work in the shell command
     * without the escape characters, the output ends up being:  --override '{vault:prod}'
     * which isn't valid json
     */
    String override_json = toJson(override_map).replaceAll(/"/, /\\\"/)
    String override_string = "override='${override_json}'"

    String command = "make systemconfig airline=${make_command_airline.toLowerCase()}" +
                    " actype=${make_command_actype.toLowerCase()}" +
                    " env=${environment.toUpperCase()} settings=${settings.toLowerCase()}" +
                    " hwtype=S4-MCP-M3 ipaddr=${ip_address} ${config_bundle_name}${generic}" +
                    " ${override_string}"
    return command.trim()    

}

def generateOverridesMap() {
    Map overrides = ["vault": (environment.toUpperCase() == "PROD" ? "prod" : "test") ]

    if (feature_toggles.contains(DISABLE_5G)) {
        overrides[DISABLE_5G] = true
    }
    if (feature_toggles.contains(STC)) {
        overrides[STC] = true
    }
    if (feature_toggles.contains(ENABLE_HIDDEN_SSID)) {
        overrides["hidden_ssid"] = true
    }
    if (feature_toggles.contains(DISABLE_W_IFE)) {
        overrides["w_ife"] = false
        overrides["ife_subsystem"] = "none"
    }
    if (feature_toggles.contains(MAINTENANCE)) {
        overrides["maintenance"] = true
    }
    return overrides
}

def promote(Boolean test_mode) {
        Boolean success = false
        try {
            String upload_spec = generate_upload_spec(test_mode)
            node(BUILD_NODE) {
                deleteDir()
                unstash(name: stash_name)
                def server = getArtifactoryServer(
                    artifactoryServerID: ARTIFACTORY_SERVER_ID)
                artifactoryUpload(spec: upload_spec, buildInfo: null,
                                         server: server)
                deleteDir()
                success = true
            }
        } catch(Exception ex) { // values being used here are defined at the top. needs to be confirmed.
            lib_hc.send(lib_agg: lib_agg, message: getFailureMessage(osc_full_version), script: this, room: hipchat_room, color: lib_colors.RED)
                lib_eh.errorHandling(e, "Promote", env.NODE_NAME, this, true)
        }
        return success
    }

def generate_upload_spec(Boolean test_mode) {
    String arty_env_path = "${ARTY_PREFIX}/${environment}"
    String arty_config_path = "${arty_env_path}/${airline}/${aircraft_type}/"
    String w_ife_arty_ccd_path = "${arty_env_path}/meta/"

    if (ip_address != PROD_MGMT_IP) {
            arty_config_path += "${ip_address}/"
    }

    if (test_mode) {
        arty_config_path = arty_config_path.replace("config", "config/${ARTIFACTORY_TEST_PATH}")
    }

    if (feature_toggles.contains(STC)) {
        arty_config_path = arty_config_path.replace(environment, "STC")
    }

    // Join all the feature toggles as a string and add them to the artifactory
    // path so that we can keep all the configuration.tar.xz files separate
    // from each other
    String toggles = feature_toggles?.findAll({ toggle -> toggle != STC }).join("_")
    arty_config_path += toggles ? "${toggles}/" : ""

    String arty_props
    try {
        arty_props = arty.mapToStringForURL(subcomponents)
    } catch(NullPointerException npe) { // this happens during unit tests because lagg
        // return a special hardcoded unit test map
        arty_props = "unit=tests;are=fun"
        def output = this.script ?: System.out
        output.println("Null pointer exception while generating upload spec.  Are you running unit tests?")
    }

    return toJson(
        "files": [["pattern": "*.tar.xz",
                   "target" : arty_config_path,
                   "props": arty_props],
                  ["pattern": "*/ccd_output/*/*",
                   "target" : w_ife_arty_ccd_path,
                   "props": arty_props
                  ]]) as String
}

void readSubcomponentVersions() {
    String properties = script.readFile(file: COMPONENT_VERSIONS_FILE).trim()
    subcomponents = misc.stringToMap(script, properties)
}

void cleanUpTestMode() {
    node("general-centos7") {
        withCredentials([[$class : "UsernamePasswordBinding",
                        credentialsId: "scm_user",
                        variable     : "creds"]]) {
            // this recursively deletes the whole devel directory
            script.sh("""
                        curl -f --silent -X DELETE -u ${script.creds} https://artifactory.viasat.com/artifactory/${ARTIFACTORY_BASE_URL}/devel
                    """)
        }
    }
}

  
/**
 * Returns a failure message using the branch name, version, and build URL.
 * @param version (String): The version number that will be used in the message
 */
def getFailureMessage(String version) {
    return "OSC version ${osc_full_version} on the ${env.BRANCH_NAME} branch failed: <a href=\"${env.BUILD_URL}\">view</a>."
}



/**
 * Checks all the return codes for success.  "Success" is all return codes (the
 * values of the map) are true.
 * @param return_codes (Map<String, Boolean>) the map of return codes to check
 * @return true if empty map or all values are true.  false if at least one value is false
 */
@NonCPS
def checkReturnCodesForAllSuccesses(Map<String, Boolean> return_codes) {
    return return_codes.every { code -> code.value }
}
//return this

